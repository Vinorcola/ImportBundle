<?php

namespace Vinorcola\ImportBundle\Model;

use InvalidArgumentException;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use Psr\Cache\CacheItemPoolInterface;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Vinorcola\ImportBundle\Config\Config;
use Vinorcola\ImportBundle\Exception\FileNotFoundException;

class ImportModel
{
    /**
     * @var Config
     */
    private $config;

    /**
     * @var Spreadsheet[]
     */
    private $fileCache = [];

    /**
     * @var CacheItemPoolInterface
     */
    private $cache;

    /**
     * ImportModel constructor.
     *
     * @param Config                 $config
     * @param CacheItemPoolInterface $cache
     */
    public function __construct(Config $config, CacheItemPoolInterface $cache)
    {
        $this->config = $config;
        $this->cache = $cache;
    }

    /**
     * @param UploadedFile $file
     * @return string New file path.
     */
    public function moveFileToApplicationTemporaryDirectory(UploadedFile $file): string
    {
        // md5() reduces the similarity of the file names generated by uniqid(), which is based on timestamps
        $fileName = md5(uniqid()) . '.' . $file->guessClientExtension();
        $movedFile = $file->move($this->config->getTemporaryDirectory(), $fileName);

        return $movedFile->getPathname();
    }

    /**
     * @param string $filePath
     * @return string[]
     */
    public function getSheetNames(string $filePath): array
    {
        $cacheItem = $this->cache->getItem(str_replace(DIRECTORY_SEPARATOR, '_', $filePath) . '-sheets');
        if (!$cacheItem->isHit()) {
            $file = $this->loadFile($filePath);
            $cacheItem->set($file->getSheetNames());
            $cacheItem->expiresAfter(2 * 60 * 60);
            $this->cache->save($cacheItem);
        }

        return $cacheItem->get();
    }

    /**
     * @param string $filePath
     * @param int    $sheetIndex
     * @param int    $limit
     * @return string[][]
     */
    public function getSample(string $filePath, int $sheetIndex = 0, int $limit = 20): array
    {
        $cacheItem = $this->cache->getItem(str_replace(DIRECTORY_SEPARATOR, '_', $filePath) . '-' . $sheetIndex . '-sample');
        if (!$cacheItem->isHit()) {
            $file = $this->loadFile($filePath);
            $sheet = new SheetHandler($file->getSheet($sheetIndex));

            $sampleContent = [];
            while (count($sampleContent) < $limit && $line = $sheet->getNextLine()) {
                $sampleContent[] = $line;
            }
            $cacheItem->set($sampleContent);
            $cacheItem->expiresAfter(2 * 60 * 60);
            $this->cache->save($cacheItem);
        }

        return $cacheItem->get();
    }

    /**
     * @param string   $importName
     * @param string   $filePath
     * @param string[] $mapping
     * @param int    $sheetIndex
     */
    public function process(string $importName, string $filePath, array $mapping, int $sheetIndex = 0): void
    {
        $file = $this->loadFile($filePath);
        $sheet = new SheetHandler($file->getSheet($sheetIndex));
        $consumer = $this->config->getConsumer($importName);

        $lineIndex = 0;
        $consumer->prepare();
        while ($line = $sheet->getNextLine()) {
            $consumer->consume(array_map(function (string $header) use ($line) {
                return $line[$header];
            }, $mapping), ++$lineIndex);
        }
        $consumer->finish($lineIndex);
    }

    /**
     * @param string $filePath
     * @return Spreadsheet
     */
    private function loadFile(string $filePath): Spreadsheet
    {
        if (!key_exists($filePath, $this->fileCache)) {
            try {
                $this->fileCache[$filePath] = IOFactory::load($filePath);
            } catch (InvalidArgumentException $exception) {
                throw new FileNotFoundException($filePath, $exception);
            }
        }

        return $this->fileCache[$filePath];
    }
}
